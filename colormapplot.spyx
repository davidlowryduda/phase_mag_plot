"""
colormapplot.spyx

This is a modification of sagemath's complex_plot that allows contour-like
plots for complex functions and which allows one to use matplotlib
compatible colormaps to color the output.

AUTHORS:

-  David Lowry-Duda (2022-02-07)

"""

# ****************************************************************************
#       Copyright (C) 2022 David Lowry-Duda <david@lowryduda.com>
#
#       Based (closely) on complex plotting routines from sagemath, written
#       by a long list of developers and originally by Robert Bradshaw.
#       See sagemath.org for more.
#
#       Copyright (C) 2009 Robert Bradshaw <robertwb@math.washington.edu>,
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#                  https://www.gnu.org/licenses/
# ****************************************************************************


from cysignals.signals cimport sig_on, sig_off, sig_check

import colorsys
import numpy as np

cimport numpy as cnumpy

from sage.plot.primitive import GraphicPrimitive
from sage.misc.decorators import options
from sage.rings.complex_double cimport ComplexDoubleElement
from sage.arith.srange import srange

from libc.math cimport hypot, atan2, atan, log, log2, sqrt
from sage.arith.constants cimport M_PI as PI


cdef inline ComplexDoubleElement new_CDF_element(double x, double y):
    z = <ComplexDoubleElement>ComplexDoubleElement.__new__(ComplexDoubleElement)
    z._complex.real = x
    z._complex.imag = y
    return z


cdef inline double cyclic_mag_to_lightness(double r):
    """
    This affects how the magnitude affects the color. Tweaking this will affect
    how the magnitude affects the color. Changing `log2` to another function
    will cause many changes. For example, removing the `log2` will give linear
    cyclic growths instead of logarithmic cycles, and may be more appropriate
    for complex functions that have little variation in size. Anything near
    zero will be darker and large values will be lighter.

    INPUT:

    - ``r`` - a non-negative real number

    OUTPUT:

    A value between `-1` (black) and `+1` (white), inclusive.
    """
    #  if r <= 0.0001:
    #      return (.5 - r / 8.) - 0.35
    rem = log2(r) % 1
    if rem < 0:
        rem += 1
    return .15 - rem/2.


cdef double mag_and_arg_to_lightness(double r, double arg):
    r_rem = log2(r) % 1
    if r_rem < 0:
        r_rem += 1
    a_rem = (5 * arg / PI) % 1
    if a_rem < 0:
        a_rem += 1
    return 0.15 - (r_rem)/4. - (a_rem)/4.


def complex_to_rgb(z_values, tiled=False):
    """
    INPUT:

    - ``z_values`` -- A grid of complex numbers, as a list of lists

    OUTPUT:

    An `N \\times M \\times 3` floating point Numpy array ``X``, where
    ``X[i,j]`` is an (r,g,b) tuple.

    EXAMPLES::

        sage: from sage.plot.complex_plot import complex_to_rgb
        sage: complex_to_rgb([[0, 1, 1000]])
        array([[[0.        , 0.        , 0.        ],
                [0.77172568, 0.        , 0.        ],
                [1.        , 0.64421177, 0.64421177]]])
        sage: complex_to_rgb([[0, 1j, 1000j]])
        array([[[0.        , 0.        , 0.        ],
                [0.38586284, 0.77172568, 0.        ],
                [0.82210588, 1.        , 0.64421177]]])
    """
    import numpy
    cdef unsigned int i, j, imax, jmax
    cdef double x, y, mag, arg
    cdef double lightness, hue, top, bot
    cdef double r, g, b
    cdef int ihue
    cdef ComplexDoubleElement z
    from sage.rings.complex_double import CDF

    imax = len(z_values)
    jmax = len(z_values[0])
    cdef cnumpy.ndarray[cnumpy.float_t, ndim=3, mode='c'] rgb = numpy.empty(dtype=numpy.float, shape=(imax, jmax, 3))

    sig_on()
    for i from 0 <= i < imax:

        row = z_values[i]
        for j from 0 <= j < jmax:

            zz = row[j]
            if type(zz) is ComplexDoubleElement:
                z = <ComplexDoubleElement>zz
            else:
                z = CDF(zz)
            x, y = z._complex.dat
            mag = hypot(x, y)
            arg = atan2(y, x) # math module arctan has range from -pi to pi, so cut along negative x-axis

            if tiled:
                lightness = mag_and_arg_to_lightness(mag, arg)
            else:
                lightness = cyclic_mag_to_lightness(mag)

            rgb[i, j, 0] = arg
            rgb[i, j, 1] = lightness
            rgb[i, j, 2] = 0

    sig_off()
    return rgb


def adjust_lightness(arr):
    """
    Create contours by adjusting lightness.

    This is the "magical" method. The array `arr` holds the argument
    and a magnitude that has already been mapped via log2 and a mod to
    a number between -1 and 1.

    The magic numbers below were chosen by hand through trial and
    error, but depend somewhat on the colormap.
    """
    h, l, s, mag = arr
    lightdelta = .4*(mag)
    l += lightdelta
    ## complex_plot will do this clipping for us
    #if l < 0:
    #    l = 0
    #if l > 1:
    #    l = 1
    return np.array([h, l, s])


def rgb_to_hls(arr):
    r = float(arr[0])
    g = float(arr[1])
    b = float(arr[2])
    mag = float(arr[3])
    return np.array(list(colorsys.rgb_to_hls(r, g, b)) + [mag])


def hls_to_rgb(arr):
    h = arr[0]
    l = arr[1]
    s = arr[2]
    return np.array(colorsys.hls_to_rgb(h, l, s))


class ComplexPlot(GraphicPrimitive):
    """
    The GraphicsPrimitive to display complex functions in using the domain
    coloring method

    INPUT:

    - ``rgb_data`` -- An array of colored points to be plotted.

    - ``x_range`` -- A minimum and maximum x value for the plot.

    - ``y_range`` -- A minimum and maximum y value for the plot.

    TESTS::

        sage: p = complex_plot(lambda z: z^2-1, (-2, 2), (-2, 2))
    """
    def __init__(self, rgb_data, x_range, y_range, options):
        """
        TESTS::

            sage: p = complex_plot(lambda z: z^2-1, (-2, 2), (-2, 2))
        """
        self.x_range = x_range
        self.y_range = y_range
        self.x_count = len(rgb_data)
        self.y_count = len(rgb_data[0])
        self.rgb_data = rgb_data
        GraphicPrimitive.__init__(self, options)

    def get_minmax_data(self):
        """
        Return a dictionary with the bounding box data.

        EXAMPLES::

            sage: p = complex_plot(lambda z: z, (-1, 2), (-3, 4))
            sage: sorted(p.get_minmax_data().items())
            [('xmax', 2.0), ('xmin', -1.0), ('ymax', 4.0), ('ymin', -3.0)]
            sage: p = complex_plot(lambda z: z, (1, 2), (3, 4))
            sage: sorted(p.get_minmax_data().items())
            [('xmax', 2.0), ('xmin', 1.0), ('ymax', 4.0), ('ymin', 3.0)]
        """
        from sage.plot.plot import minmax_data
        return minmax_data(self.x_range, self.y_range, dict=True)

    def _allowed_options(self):
        """
        TESTS::

            sage: isinstance(complex_plot(lambda z: z, (-1,1), (-1,1))[0]._allowed_options(), dict)
            True
        """
        return {'plot_points':'How many points to use for plotting precision',
                'interpolation':'What interpolation method to use'}

    def _repr_(self):
        """
        TESTS::

            sage: isinstance(complex_plot(lambda z: z, (-1,1), (-1,1))[0]._repr_(), str)
            True
        """
        return "ComplexPlot defined by a %s x %s data grid"%(self.x_count, self.y_count)

    def _render_on_subplot(self, subplot):
        """
        TESTS::

            sage: complex_plot(lambda x: x^2, (-5, 5), (-5, 5))
            Graphics object consisting of 1 graphics primitive
        """
        options = self.options()
        x0, x1 = float(self.x_range[0]), float(self.x_range[1])
        y0, y1 = float(self.y_range[0]), float(self.y_range[1])
        subplot.imshow(self.rgb_data, origin='lower', extent=(x0, x1, y0, y1),
                       interpolation=options['interpolation'])


@options(plot_points=100, interpolation='catrom')
def color_complex_plot(f, x_range, y_range, contoured=True, tiled=False, cmap=None, **options):
    r"""
    ``color_complex_plot`` takes a complex function of one variable,
    `f(z)` and plots output of the function over the specified
    ``x_range`` and ``y_range`` as demonstrated below. The magnitude of the
    output is indicated by the brightness (with zero being black and
    infinity being white) while the argument is represented by the
    hue (with red being positive real, and increasing through orange,
    yellow, ... as the argument increases).

    ``color_complex_plot(f, (xmin, xmax), (ymin, ymax), contoured, tiled, cmap, ...)``

    INPUT:

    - ``f`` -- a function of a single complex value `x + iy`

    - ``(xmin, xmax)`` -- 2-tuple, the range of ``x`` values

    - ``(ymin, ymax)`` -- 2-tuple, the range of ``y`` values

    The following inputs must all be passed in as named parameters:

    - ``plot_points`` -- integer (default: 100); number of points to plot
      in each direction of the grid

    - ``interpolation`` -- string (default: ``'catrom'``), the interpolation
      method to use: ``'bilinear'``, ``'bicubic'``, ``'spline16'``,
      ``'spline36'``, ``'quadric'``, ``'gaussian'``, ``'sinc'``,
      ``'bessel'``, ``'mitchell'``, ``'lanczos'``, ``'catrom'``,
      ``'hermite'``, ``'hanning'``, ``'hamming'``, ``'kaiser'``


    EXAMPLES:

    Here we plot a couple of simple functions::

        sage: color_complex_plot(sqrt(x), (-5, 5), (-5, 5))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(sqrt(x), (-5, 5), (-5, 5)))

    ::

        sage: color_complex_plot(sin(x), (-5, 5), (-5, 5))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(sin(x), (-5, 5), (-5, 5)))

    ::

        sage: color_complex_plot(log(x), (-10, 10), (-10, 10))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(log(x), (-10, 10), (-10, 10)))

    ::

        sage: color_complex_plot(exp(x), (-10, 10), (-10, 10))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(exp(x), (-10, 10), (-10, 10)))

    A plot with a different choice of colormap.

        sage: from matplotlib.cm import Inferno
        sage: color_complex_plot(exp(x), (-10, 10), (-10, 10), cmap=Inferno)
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        from matplotlib.cm import Inferno
        sphinx_plot(color_complex_plot(exp(x), (-10, 10), (-10, 10), cmap=Inferno))

    A function with some nice zeros and a pole::

        sage: f(z) = z^5 + z - 1 + 1/z
        sage: color_complex_plot(f, (-3, 3), (-3, 3))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        def f(z): return z**5 + z - 1 + 1/z
        sphinx_plot(color_complex_plot(f, (-3, 3), (-3, 3)))

    Here is the identity, useful for seeing what values map to what colors::

        sage: color_complex_plot(lambda z: z, (-3, 3), (-3, 3))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(lambda z: z, (-3, 3), (-3, 3)))

    The Riemann Zeta function::

        sage: color_complex_plot(zeta, (-30,30), (-30,30))
        Graphics object consisting of 1 graphics primitive

    .. PLOT::

        sphinx_plot(color_complex_plot(zeta, (-30,30), (-30,30)))

    Extra options will get passed on to show(), as long as they are valid::

        sage: color_complex_plot(lambda z: z, (-3, 3), (-3, 3), figsize=[1,1])
        Graphics object consisting of 1 graphics primitive

    ::

        sage: color_complex_plot(lambda z: z, (-3, 3), (-3, 3)).show(figsize=[1,1]) # These are equivalent

    TESTS:

    Test to make sure that using fast_callable functions works::

        sage: f(x) = x^2
        sage: g = fast_callable(f, domain=CC, vars='x')
        sage: h = fast_callable(f, domain=CDF, vars='x')
        sage: P = color_complex_plot(f, (-10, 10), (-10, 10))
        sage: Q = color_complex_plot(g, (-10, 10), (-10, 10))
        sage: R = color_complex_plot(h, (-10, 10), (-10, 10))
        sage: S = color_complex_plot(exp(x)-sin(x), (-10, 10), (-10, 10))
        sage: P; Q; R; S
        Graphics object consisting of 1 graphics primitive
        Graphics object consisting of 1 graphics primitive
        Graphics object consisting of 1 graphics primitive
        Graphics object consisting of 1 graphics primitive

    Test to make sure symbolic functions still work without declaring
    a variable.  (We don't do this in practice because it doesn't use
    fast_callable, so it is much slower.)

    ::

        sage: color_complex_plot(sqrt, (-5, 5), (-5, 5))
        Graphics object consisting of 1 graphics primitive
    """
    from sage.plot.all import Graphics
    from sage.plot.misc import setup_for_eval_on_grid
    from sage.ext.fast_callable import fast_callable
    from sage.rings.complex_double import CDF
    import matplotlib.cm

    try:
        f = fast_callable(f, domain=CDF, expect_one_var=True)
    except (AttributeError, TypeError, ValueError):
        pass

    if cmap is None:
        cmap = matplotlib.cm.get_cmap('cividis')

    cdef double x, y
    _, ranges = setup_for_eval_on_grid([], [x_range, y_range],
                                       options['plot_points'])
    x_range = ranges[0]
    y_range = ranges[1]
    cdef list z_values = []
    cdef list row
    for y in srange(*y_range, include_endpoint=True):
        row = []
        for x in srange(*x_range, include_endpoint=True):
            sig_check()
            row.append(f(new_CDF_element(x, y)))
        z_values.append(row)


    rgbs = complex_to_rgb(z_values, tiled=tiled)
    args = rgbs[:,:,0]

    # Mask for undefined indices
    undefined_indices = np.isnan(rgbs).any(-1)

    pi = float(CDF.pi())
    normalized_colors = cmap((args + pi) / (2 * pi))
    normalized_colors = normalized_colors[:,:,:3]  # discard alpha channel
    mags = np.copy(rgbs[:,:,1])
    args_mags = np.dstack((normalized_colors, mags))

    # add contours: convert to hls, adjust, convert back
    tmparr = np.apply_along_axis(rgb_to_hls, 2, args_mags)
    if contoured or tiled:
        tmparr = np.apply_along_axis(adjust_lightness, 2, tmparr)
    rgbs = np.apply_along_axis(hls_to_rgb, 2, tmparr)

    # Apply mask
    rgbs[undefined_indices] = 1

    g = Graphics()
    g._set_extra_kwds(Graphics._extract_kwds_for_show(options, ignore=['xmin', 'xmax']))
    g.add_primitive(ComplexPlot(rgbs,
                                x_range[:2], y_range[:2], options))
    return g
